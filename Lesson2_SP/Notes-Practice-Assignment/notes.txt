Snake_cakse & CamelCased 'duh': 

When you define or initialize a method, variable, or file always use snake_case.
using all lower case letters and separating words with the undersscore character.

When you want to represent a value that will not change we use CONSTANTS

THIS_IS_A_CONSTANT = "yes it is and it will not change*(but it can)"
When you want to represent a value that will not change in a Ruby program.
#### constant declaration:
FOUR = 'four'
FIVE = 5

when working with do/end blocks, prefer {} when the entire code expression fits on one line.

When declaring class names use CamelCase formatting.  (:nospaces&capseveryword)

Kickoff-

Learn to program proceduraly

OO Programming

Smorgasburg of diff topics

Learning to Code vs Learning to Program
second step - building apps and problem solving

"low hanging fruit is eliminated"

We're learning Application development
web mobile & all sorts of application development


____
A note on style:

"When you want to display something"
"When you want to ask the user for some input"


Calling the methods with teir respective module.

Kernel.puts() Kernel.gets()
-module methods in the Kernel module.
"all methods come from somewhere"


SHORT CIRCUITING:  &&, || will stop evaluating expressions once it can guarantee a return value.
Short circuiting: Logical &, OR will stop evaluating expressions once they can guarantee a return value.

The logical & operator will short circuit when it encounters the first false expression
The logical || operator will short-circuit as soon as it encounters a true expression.

RUBY considers everything to be truthy other than "false" and "nil"

AN EXPRESSION THAT RUBY CONSIDERS TRUE IS NOT THE SAME AS THE TRUE OBJECT
 *considers the integer to be truthy, does not mean that the variable is equal to true.

 _____

Pseudo-Code

Trying to load the problem into our brain first.

Two layers to solving any problem:

1. The logical problem domain layer.
2. The syntatical programming language layer.

Using PseudoCode helps us focus on the logical problem domain layer, without dragging into the
programming language layer.

ssgpriwe captrain ssgpriwe
Start staaatoh
Set  Hajime
Get daite
Print
Read yomi
if/else if/ else
while
end

START :	 START OF THE PROGRAM
SET 	SET A VARIABLE WE CAN USE FOR LATER
GET 	RETRIEVE VALUE FROM USER
PRINT 	DISPLAYS OUTPUT TO USER
READ RETRIEVE VALUE FROM VARIABLE
IF/ELSE IF/ ELSE : SHOW CONDITIONAL BRANCHES IN LOGIC
WHILE SHOW LOOPING LOGIC
END END OF THE PROGRAM

in pseudo code we can't verify that the logic is sound.

Pseudo code is a guess at the solution, and there is no verification that the logic is correct.

FLOWCHARTS:
REALLY?!

find out if there are method
#valid_number?
#valid_operator?

RUBOCOP!

rubocop <filename> --format offenses
rubocop -a <filename>


When we write ruby code that's not in a class we are working within an object called 'main' (an instance of object)
Kernel module is automatically loaded by Object, giving us access to all of its methods.

__________________________


JUST REMEMBER: Local variables that are not initialized inside a method definition must be defined as parameters.


methods and blocks can interact with one another, the level of that interaction is set by the METHOD DEFINITION and then used at the METHOD INVOCATION.

¯\_(ツ)_/¯
• def/end construct is method definition
• Reference of method name is method invocation
• Method invocation followed by do/end{} defines a block, block is part of method invocation (as argument)
•MI sets a scope for local vars in terms of params and block interaction.
•MI uses the scope set by the MD

__________________________

Coding Tips 2

Making your code redable is of paramount importance.

Use some new lines to separate the different CONCERNS in the code.

1. variable initialization
2. user input and validation
3. using the variable

a method should do one thing, and be names appropiately.
-if you can treat a method as a 'black box' then it is a well designed method.

ex; method- total returns a value , print total returns nil.

Don't write a method that mutates, outputs and returns a meaningful value.
Make sure methods just do one of those things

**"we aren't mutating the 'words' object, were mutating each element within 'words'."

•don't mutate the collection while iterating through it.
you can mutate the individual elents within that collection, just not the collection itself.

********
whilst iterating through a collection the delete method skips every other element
********

Variable Shadowing:
	when you choose a local variable in an inner scope that shares the same name as an outer scope.
	prevents you from accessing the outer scope variable from an inner scope.

__________________________



